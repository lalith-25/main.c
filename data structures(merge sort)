#include <stdio.h>
#include <stdlib.h>

void merge(int a[], int l, int m, int r) 
{
    int i, j, k;
    int size = r - l + 1;
    int *temp = (int *)malloc(size * sizeof(int)); 
    if (temp == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }

    i = l;
    j = m + 1;
    k = 0;
    
    while (i <= m && j <= r) 
    {
        if (a[i] <= a[j]) 
        {
            temp[k++] = a[i++];
        } 
        else 
        {
            temp[k++] = a[j++];
        }
    }

    while (i <= m) 
    {
        temp[k++] = a[i++];
    }
    while (j <= r) 
    {
        temp[k++] = a[j++];
    }

    for (i = l, k = 0; i <= r; i++, k++) 
    {
        a[i] = temp[k];
    }

    free(temp);
}

void mergeSort(int arr[], int l, int r) 
{
    if (l < r) 
    {
        int m = (l + r) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main()
{
    int n;

    printf("Enter the number of finishing times: ");
    scanf("%d", &n);

    int *arr = (int *)malloc(n * sizeof(int)); 
    if (arr == NULL) 
    {
        printf("Memory allocation failed\n");
        return 1;
    }

    printf("Enter the finishing times (in minutes):\n");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    mergeSort(arr, 0, n - 1);

    printf("Sorted finishing times are:\n");
    for (int i = 0; i < n; i++) 
    {
        printf("%d ", arr[i]);
    }
    printf("\n");

    free(arr); 
    return 0;
}
